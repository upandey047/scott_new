# Generated by Django 3.2.7 on 2021-12-02 09:54

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contacts', '0001_initial'),
        ('leads', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AFCAComplaintLodged',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('complaint_lodged_status', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=10, verbose_name='Complaint Lodged')),
                ('contact_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Contact Name')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Date')),
                ('afca_case_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='AFCA Case Number')),
                ('mobile', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Mobile number must be entered in the format: 'XXXXXXXXXX' or '(XX) XXXXXXXXXX'. Up to 12 digits allowed.", regex='^[(\\d) ]{10,15}$')])),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('comments', models.CharField(blank=True, max_length=100, null=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('company', models.CharField(max_length=200)),
                ('address', models.CharField(max_length=400)),
                ('phone', models.IntegerField()),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Bank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('company', models.CharField(max_length=200)),
                ('address', models.CharField(max_length=400)),
                ('phone', models.IntegerField()),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('WS', 'WS'), ('SS', 'SS'), ('TO', 'TO')], default='WS', max_length=5, verbose_name='Deal Type')),
                ('exchange', models.DateField(blank=True, null=True, verbose_name='Exchange Date')),
                ('settlement', models.DateField(blank=True, null=True, verbose_name='Settlement Date')),
                ('cool_off_period_expires', models.DateField(blank=True, null=True, verbose_name='Cool Off Period Expires')),
                ('purchase_price', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('renovation_cost', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
            ],
        ),
        migrations.CreateModel(
            name='Executor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('company', models.CharField(max_length=200)),
                ('address', models.CharField(max_length=400)),
                ('phone', models.IntegerField()),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='External',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=300, verbose_name='Location')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('completion_date', models.DateField(blank=True, null=True, verbose_name='Completion Due')),
                ('duration', models.IntegerField(blank=True, default=0, null=True, verbose_name='Duration')),
                ('thoughts', models.CharField(blank=True, max_length=300, null=True, verbose_name='Thoughts')),
                ('budget', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Budget')),
                ('total_cost', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Total Cost')),
                ('difference', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter Integer numbers.', regex='^[\\d\\,\\-]*$')], verbose_name='Savings / Blow Out')),
                ('status', models.CharField(choices=[('Complete', 'Complete'), ('Incomplete', 'Incomplete')], default='Incomplete', max_length=20, verbose_name='Status')),
            ],
        ),
        migrations.CreateModel(
            name='ExternalMaterials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=100, null=True, verbose_name='Description')),
                ('quantity', models.IntegerField(blank=True, null=True, verbose_name='Quantity')),
                ('price', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Price')),
                ('total', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Total')),
            ],
        ),
        migrations.CreateModel(
            name='ExternalTasks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.CharField(blank=True, max_length=200, null=True, verbose_name='Task')),
                ('status', models.BooleanField(default=False, verbose_name='Completed')),
                ('quote_number', models.IntegerField(blank=True, null=True, verbose_name='Quote #')),
                ('invoice_number', models.IntegerField(blank=True, null=True, verbose_name='Invoice #')),
                ('total', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Total')),
            ],
        ),
        migrations.CreateModel(
            name='ExternalTasksForMyself',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Task')),
                ('completion_status', models.BooleanField(default=False, verbose_name='Completed')),
            ],
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('company', models.CharField(max_length=200)),
                ('address', models.CharField(max_length=400)),
                ('phone', models.IntegerField()),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='FeasibilityReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_price', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('purchase_costs', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('renovation_costs', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('holding_costs', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('estimated_selling_price_lower_limit', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('estimated_selling_price_upper_limit', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('potential_profit_lower_limit', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('potential_profit_upper_limit', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('money_partner', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('net_profit_lower_limit', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Net Profit Lower Limit')),
                ('net_profit_upper_limit', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Net Profit Upper Limit')),
                ('comments', models.CharField(blank=True, max_length=100, null=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='HoldingCosts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Cost Name')),
                ('amount', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
            ],
        ),
        migrations.CreateModel(
            name='Images',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.FileField(upload_to='renovation/')),
                ('image_title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Image Title')),
                ('category', models.CharField(choices=[('Before-Renovation', 'Before-Renovation'), ('After-Renovation', 'After-Renovation')], default='Before-Renovation', max_length=50, verbose_name='Category')),
            ],
        ),
        migrations.CreateModel(
            name='InternalTasksForMyself',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Task')),
                ('completion_status', models.BooleanField(default=False, verbose_name='Completed')),
            ],
        ),
        migrations.CreateModel(
            name='Liquidator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('company', models.CharField(max_length=200)),
                ('address', models.CharField(max_length=400)),
                ('phone', models.IntegerField()),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='ListForSale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commission_percentage', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter whole numbers.', regex='^[\\d\\,.]*$')], verbose_name='Listed Price')),
                ('agreement_date', models.DateField(blank=True, null=True, verbose_name='Agreement Date')),
                ('agreement_market_value', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Agreement Market Value')),
                ('listed_price', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Listed Price')),
                ('price_drop', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Price Drop')),
                ('sale_method', models.CharField(choices=[('Auction', 'Auction'), ('Private Treaty', 'Private Treaty'), ('Tender', 'Tender')], default='Auction', max_length=50, verbose_name='Sale Method')),
                ('auction_date', models.DateField(blank=True, null=True, verbose_name='Auction Date')),
                ('advertising_costs', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Advertising Costs')),
                ('result', models.CharField(choices=[('Sold', 'Sold'), ('Passed In', 'Passed In')], default='Sold', max_length=50, verbose_name='Result')),
            ],
        ),
        migrations.CreateModel(
            name='Materials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=100, null=True, verbose_name='Description')),
                ('quantity', models.IntegerField(blank=True, null=True, verbose_name='Quantity')),
                ('price', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Price')),
                ('total', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Total')),
            ],
        ),
        migrations.CreateModel(
            name='MyPurchaseDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('money_lender', models.CharField(choices=[('Bank', 'Bank'), ('Private Lender', 'Private Lender')], default='Bank', max_length=50, verbose_name='Money Lender')),
            ],
        ),
        migrations.CreateModel(
            name='Other',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('company', models.CharField(max_length=200)),
                ('address', models.CharField(max_length=400)),
                ('phone', models.IntegerField()),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='PrimeCostItems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=100, null=True, verbose_name='Description')),
                ('item_number', models.IntegerField(blank=True, null=True, verbose_name='Item #')),
                ('quantity', models.IntegerField(blank=True, null=True, verbose_name='Quantity')),
                ('price', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Price')),
                ('total', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Total')),
            ],
        ),
        migrations.CreateModel(
            name='ProfitSplit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.IntegerField(blank=True, null=True)),
                ('amount', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter Integer numbers.', regex='^[\\d\\,\\-\\.]*$')])),
            ],
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market_value', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('renovation_required', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=5, verbose_name='Renovation Required')),
                ('renovation_allowance', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Renovation Allowance')),
                ('minimum_profit', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Minimum Profit')),
                ('total_purchase_costs', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Total Purchase Costs')),
                ('maximum_offer', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter Integer numbers.', regex='^([\\d\\,\\-]+(\\.00)?)?$')], verbose_name='Maximum Offer')),
                ('deal', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='purchase', to='deals.deal')),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseComparableSales',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=200, null=True, verbose_name='Address')),
                ('beds', models.IntegerField(default=0, verbose_name='Beds')),
                ('bath', models.IntegerField(default=0, verbose_name='Bath')),
                ('land', models.IntegerField(default=0, verbose_name='Land')),
                ('garage', models.IntegerField(default=0, verbose_name='Garage')),
                ('location', models.CharField(choices=[('Inferior', 'Inferior'), ('Comparable', 'Comparable'), ('Superior', 'Superior')], default='Inferior', max_length=20, verbose_name='Location')),
                ('construction', models.CharField(choices=[('Inferior', 'Inferior'), ('Comparable', 'Comparable'), ('Superior', 'Superior')], default='Inferior', max_length=20, verbose_name='Construction')),
                ('accommodation', models.CharField(choices=[('Inferior', 'Inferior'), ('Comparable', 'Comparable'), ('Superior', 'Superior')], default='Inferior', max_length=20, verbose_name='Accommodation')),
                ('improvements', models.CharField(choices=[('Inferior', 'Inferior'), ('Comparable', 'Comparable'), ('Superior', 'Superior')], default='Inferior', max_length=20, verbose_name='Improvements')),
                ('sale_date', models.DateField(blank=True, null=True, verbose_name='Sale Date')),
                ('sale_price', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('overall_comparability', models.CharField(choices=[('Inferior', 'Inferior'), ('Comparable', 'Comparable'), ('Superior', 'Superior')], default='Inferior', max_length=20, verbose_name='Overall Comparability')),
                ('purchase', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comparable_sales', to='deals.purchase')),
            ],
        ),
        migrations.CreateModel(
            name='Renovation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_expenses', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Current Expenses')),
                ('renovation_difference', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter Integer numbers.', regex='^[\\d\\,\\-]*$')], verbose_name='Difference')),
                ('insurer', models.CharField(blank=True, max_length=100, null=True, verbose_name='Insurer')),
                ('policy_cost', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Policy Cost')),
                ('policy_cover_amount', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Policy Cover Amount')),
                ('policy_start_date', models.DateField(blank=True, null=True, verbose_name="Policy's Start Date")),
                ('policy_expiry_date', models.DateField(blank=True, null=True, verbose_name="Policy's Expiry Date")),
                ('purchase', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='renovation', to='deals.purchase')),
            ],
        ),
        migrations.CreateModel(
            name='Rooms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('completion_date', models.DateField(blank=True, null=True, verbose_name='Completion Due')),
                ('duration', models.IntegerField(blank=True, default=0, null=True, verbose_name='Duration')),
                ('room_thoughts', models.CharField(blank=True, max_length=300, null=True, verbose_name='Thoughts')),
                ('room_budget', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Room Budget')),
                ('room_total_cost', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Room Total Cost')),
                ('room_difference', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter Integer numbers.', regex='^[\\d\\,\\-]*$')], verbose_name='Savings / Blow Out')),
                ('status', models.CharField(choices=[('Complete', 'Complete'), ('Incomplete', 'Incomplete')], default='Incomplete', max_length=20, verbose_name='Status')),
                ('bathroom', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='room', to='leads.bathroom')),
                ('bedroom', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='room', to='leads.bedroom')),
                ('dining', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='room', to='leads.dining')),
                ('entry', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='room', to='leads.entry')),
                ('kitchen', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='room', to='leads.kitchen')),
                ('laundry', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='room', to='leads.laundry')),
                ('lounge', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='room', to='leads.lounge')),
                ('parking', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='room', to='leads.parking')),
                ('renovation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='deals.renovation')),
            ],
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sale_price', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('capital_gain_gross', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter Integer numbers.', regex='^[\\d\\,\\-]*$')])),
                ('agent_fees', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('mortgage_payout_figure', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('legal_fees', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('dealing_or_withdrawal_fees', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('council', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('strata_fees', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('additional_cost', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('additional_cost_comments', models.CharField(blank=True, max_length=100, null=True, verbose_name='Comments')),
                ('total_sale_costs', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Total Sale Costs')),
                ('deal', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sale', to='deals.deal')),
            ],
        ),
        migrations.CreateModel(
            name='SaleComparableSales',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=200, null=True, verbose_name='Address')),
                ('beds', models.IntegerField(default=0, verbose_name='Beds')),
                ('bath', models.IntegerField(default=0, verbose_name='Bath')),
                ('land', models.IntegerField(default=0, verbose_name='Land')),
                ('garage', models.IntegerField(default=0, verbose_name='Garage')),
                ('location', models.CharField(choices=[('Inferior', 'Inferior'), ('Comparable', 'Comparable'), ('Superior', 'Superior')], default='Inferior', max_length=20, verbose_name='Location')),
                ('construction', models.CharField(choices=[('Inferior', 'Inferior'), ('Comparable', 'Comparable'), ('Superior', 'Superior')], default='Inferior', max_length=20, verbose_name='Construction')),
                ('accommodation', models.CharField(choices=[('Inferior', 'Inferior'), ('Comparable', 'Comparable'), ('Superior', 'Superior')], default='Inferior', max_length=20, verbose_name='Accommodation')),
                ('improvements', models.CharField(choices=[('Inferior', 'Inferior'), ('Comparable', 'Comparable'), ('Superior', 'Superior')], default='Inferior', max_length=20, verbose_name='Improvements')),
                ('sale_date', models.DateField(blank=True, null=True, verbose_name='Sale Date')),
                ('sale_price', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('overall_comparability', models.CharField(choices=[('Inferior', 'Inferior'), ('Comparable', 'Comparable'), ('Superior', 'Superior')], default='Inferior', max_length=20, verbose_name='Overall Comparability')),
                ('sale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comparable_sales', to='deals.sale')),
            ],
        ),
        migrations.CreateModel(
            name='Solicitor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lawFirm', models.CharField(max_length=100)),
                ('contactName', models.CharField(max_length=300)),
                ('postalAddress', models.CharField(max_length=400)),
                ('mobile', models.IntegerField()),
                ('officePhone', models.PositiveIntegerField(default=0)),
                ('officeFax', models.PositiveIntegerField(default=0)),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.ManyToManyField(related_name='team_contacts', to='contacts.Contact')),
                ('renovation', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team', to='deals.renovation')),
            ],
        ),
        migrations.CreateModel(
            name='Tasks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.CharField(blank=True, max_length=200, null=True, verbose_name='Task')),
                ('status', models.BooleanField(default=False, verbose_name='Completed')),
                ('quote_number', models.IntegerField(blank=True, null=True, verbose_name='Quote #')),
                ('invoice_number', models.IntegerField(blank=True, null=True, verbose_name='Invoice #')),
                ('total', models.CharField(blank=True, default=0, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Total')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='deals.rooms')),
                ('service_man', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='contacts.contact')),
            ],
        ),
        migrations.CreateModel(
            name='Sold',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_sold', models.DateField(default=datetime.date.today, verbose_name='Date Sold')),
                ('exchange_date', models.DateField(blank=True, null=True, verbose_name='Exchange Date')),
                ('completion_time', models.IntegerField(blank=True, null=True, verbose_name='Completion Time')),
                ('completion_date', models.DateField(blank=True, null=True, verbose_name='Completion Date')),
                ('settlement_date', models.DateField(blank=True, null=True, verbose_name='Settlement Date')),
                ('listed_price', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Listed Price')),
                ('sale_price', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Sale Price')),
                ('difference', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Difference')),
                ('deal', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sold', to='deals.deal')),
            ],
        ),
        migrations.CreateModel(
            name='SaleDealInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exchange', models.DateField(blank=True, null=True, verbose_name='Exchange Date')),
                ('settlement', models.DateField(blank=True, null=True, verbose_name='Settlement Date')),
                ('cool_off_period_expires', models.DateField(blank=True, null=True, verbose_name='Cool Off Period Expires')),
                ('sale_price', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Sale Price')),
                ('commission_paid', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')], verbose_name='Commission Paid')),
                ('deal', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='deals.deal')),
            ],
        ),
        migrations.CreateModel(
            name='SaleComparableSalesImages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, upload_to='comparable_sales/')),
                ('image_title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Image Title')),
                ('comparable_sale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='deals.salecomparablesales')),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseCosts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Cost Name')),
                ('amount', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid positive monetary value with or without two decimals.', regex='^[\\d\\,]*(\\.\\d{1,2})?$')])),
                ('purchase', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='deals.purchase')),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseCorrespondanceDocuments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.FileField(blank=True, null=True, upload_to='purchase/correspondance', verbose_name='Document')),
                ('note', models.CharField(blank=True, max_length=100, null=True, verbose_name='Note')),
                ('purchase', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='purchase_correspondance_documents', to='deals.purchase')),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseComparableSalesImages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, upload_to='comparable_sales/')),
                ('image_title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Image Title')),
                ('comparable_sale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='deals.purchasecomparablesales')),
            ],
        ),
    ]
